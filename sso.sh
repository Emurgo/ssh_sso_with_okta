#!/bin/bash
if [ ! -d "/lib/security" ];then
	mkdir /lib/security
fi
if [ ! -d "/root/deviceflow" ];then
	mkdir /root/deviceflow
fi
cd /root/deviceflow
wget https://raw.githubusercontent.com/oktadev/okta-ssh-oauth-example/master/qr.c
apt-get update && apt install lsb-release net-tools vim openssh-server git build-essential libpam0g-dev libcurl4-openssl-dev  libqrencode-dev libssl-dev -y
echo  | base64 -d > deviceflow.c
echo IyBUaGlzIGlzIHRoZSBzc2hkIHNlcnZlciBzeXN0ZW0td2lkZSBjb25maWd1cmF0aW9uIGZpbGUuICBTZWUKIyBzc2hkX2NvbmZpZyg1KSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KCiMgVGhpcyBzc2hkIHdhcyBjb21waWxlZCB3aXRoIFBBVEg9L3Vzci9sb2NhbC9zYmluOi91c3IvbG9jYWwvYmluOi91c3Ivc2JpbjovdXNyL2Jpbjovc2JpbjovYmluOi91c3IvZ2FtZXMKCiMgVGhlIHN0cmF0ZWd5IHVzZWQgZm9yIG9wdGlvbnMgaW4gdGhlIGRlZmF1bHQgc3NoZF9jb25maWcgc2hpcHBlZCB3aXRoCiMgT3BlblNTSCBpcyB0byBzcGVjaWZ5IG9wdGlvbnMgd2l0aCB0aGVpciBkZWZhdWx0IHZhbHVlIHdoZXJlCiMgcG9zc2libGUsIGJ1dCBsZWF2ZSB0aGVtIGNvbW1lbnRlZC4gIFVuY29tbWVudGVkIG9wdGlvbnMgb3ZlcnJpZGUgdGhlCiMgZGVmYXVsdCB2YWx1ZS4KCkluY2x1ZGUgL2V0Yy9zc2gvc3NoZF9jb25maWcuZC8qLmNvbmYKCiNQb3J0IDIyCiNBZGRyZXNzRmFtaWx5IGFueQojTGlzdGVuQWRkcmVzcyAwLjAuMC4wCiNMaXN0ZW5BZGRyZXNzIDo6CgojSG9zdEtleSAvZXRjL3NzaC9zc2hfaG9zdF9yc2Ffa2V5CiNIb3N0S2V5IC9ldGMvc3NoL3NzaF9ob3N0X2VjZHNhX2tleQojSG9zdEtleSAvZXRjL3NzaC9zc2hfaG9zdF9lZDI1NTE5X2tleQoKIyBDaXBoZXJzIGFuZCBrZXlpbmcKI1Jla2V5TGltaXQgZGVmYXVsdCBub25lCgojIExvZ2dpbmcKI1N5c2xvZ0ZhY2lsaXR5IEFVVEgKI0xvZ0xldmVsIElORk8KCiMgQXV0aGVudGljYXRpb246CgojTG9naW5HcmFjZVRpbWUgMm0KUGVybWl0Um9vdExvZ2luIG5vCiNTdHJpY3RNb2RlcyB5ZXMKI01heEF1dGhUcmllcyA2CiNNYXhTZXNzaW9ucyAxMAoKI1B1YmtleUF1dGhlbnRpY2F0aW9uIHllcwoKIyBFeHBlY3QgLnNzaC9hdXRob3JpemVkX2tleXMyIHRvIGJlIGRpc3JlZ2FyZGVkIGJ5IGRlZmF1bHQgaW4gZnV0dXJlLgojQXV0aG9yaXplZEtleXNGaWxlICAgICAuc3NoL2F1dGhvcml6ZWRfa2V5cyAuc3NoL2F1dGhvcml6ZWRfa2V5czIKCiNBdXRob3JpemVkUHJpbmNpcGFsc0ZpbGUgbm9uZQoKI0F1dGhvcml6ZWRLZXlzQ29tbWFuZCBub25lCiNBdXRob3JpemVkS2V5c0NvbW1hbmRVc2VyIG5vYm9keQoKIyBGb3IgdGhpcyB0byB3b3JrIHlvdSB3aWxsIGFsc28gbmVlZCBob3N0IGtleXMgaW4gL2V0Yy9zc2gvc3NoX2tub3duX2hvc3RzCiNIb3N0YmFzZWRBdXRoZW50aWNhdGlvbiBubwojIENoYW5nZSB0byB5ZXMgaWYgeW91IGRvbid0IHRydXN0IH4vLnNzaC9rbm93bl9ob3N0cyBmb3IKIyBIb3N0YmFzZWRBdXRoZW50aWNhdGlvbgojSWdub3JlVXNlcktub3duSG9zdHMgbm8KIyBEb24ndCByZWFkIHRoZSB1c2VyJ3Mgfi8ucmhvc3RzIGFuZCB+Ly5zaG9zdHMgZmlsZXMKI0lnbm9yZVJob3N0cyB5ZXMKCiMgVG8gZGlzYWJsZSB0dW5uZWxlZCBjbGVhciB0ZXh0IHBhc3N3b3JkcywgY2hhbmdlIHRvIG5vIGhlcmUhCiNQYXNzd29yZEF1dGhlbnRpY2F0aW9uIHllcwojUGVybWl0RW1wdHlQYXNzd29yZHMgbm8KCiMgQ2hhbmdlIHRvIHllcyB0byBlbmFibGUgY2hhbGxlbmdlLXJlc3BvbnNlIHBhc3N3b3JkcyAoYmV3YXJlIGlzc3VlcyB3aXRoCiMgc29tZSBQQU0gbW9kdWxlcyBhbmQgdGhyZWFkcykKCiMgS2VyYmVyb3Mgb3B0aW9ucwojS2VyYmVyb3NBdXRoZW50aWNhdGlvbiBubwojS2VyYmVyb3NPckxvY2FsUGFzc3dkIHllcwojS2VyYmVyb3NUaWNrZXRDbGVhbnVwIHllcwojS2VyYmVyb3NHZXRBRlNUb2tlbiBubwoKIyBHU1NBUEkgb3B0aW9ucwojR1NTQVBJQXV0aGVudGljYXRpb24gbm8KI0dTU0FQSUNsZWFudXBDcmVkZW50aWFscyB5ZXMKI0dTU0FQSVN0cmljdEFjY2VwdG9yQ2hlY2sgeWVzCiNHU1NBUElLZXlFeGNoYW5nZSBubwoKIyBTZXQgdGhpcyB0byAneWVzJyB0byBlbmFibGUgUEFNIGF1dGhlbnRpY2F0aW9uLCBhY2NvdW50IHByb2Nlc3NpbmcsCiMgYW5kIHNlc3Npb24gcHJvY2Vzc2luZy4gSWYgdGhpcyBpcyBlbmFibGVkLCBQQU0gYXV0aGVudGljYXRpb24gd2lsbAojIGJlIGFsbG93ZWQgdGhyb3VnaCB0aGUgS2JkSW50ZXJhY3RpdmVBdXRoZW50aWNhdGlvbiBhbmQKIyBQYXNzd29yZEF1dGhlbnRpY2F0aW9uLiAgRGVwZW5kaW5nIG9uIHlvdXIgUEFNIGNvbmZpZ3VyYXRpb24sCiMgUEFNIGF1dGhlbnRpY2F0aW9uIHZpYSBLYmRJbnRlcmFjdGl2ZUF1dGhlbnRpY2F0aW9uIG1heSBieXBhc3MKIyB0aGUgc2V0dGluZyBvZiAiUGVybWl0Um9vdExvZ2luIHdpdGhvdXQtcGFzc3dvcmQiLgojIElmIHlvdSBqdXN0IHdhbnQgdGhlIFBBTSBhY2NvdW50IGFuZCBzZXNzaW9uIGNoZWNrcyB0byBydW4gd2l0aG91dAojIFBBTSBhdXRoZW50aWNhdGlvbiwgdGhlbiBlbmFibGUgdGhpcyBidXQgc2V0IFBhc3N3b3JkQXV0aGVudGljYXRpb24KIyBhbmQgS2JkSW50ZXJhY3RpdmVBdXRoZW50aWNhdGlvbiB0byAnbm8nLgpVc2VQQU0geWVzCgojQWxsb3dBZ2VudEZvcndhcmRpbmcgeWVzCiNBbGxvd1RjcEZvcndhcmRpbmcgeWVzCiNHYXRld2F5UG9ydHMgbm8KWDExRm9yd2FyZGluZyB5ZXMKI1gxMURpc3BsYXlPZmZzZXQgMTAKI1gxMVVzZUxvY2FsaG9zdCB5ZXMKI1Blcm1pdFRUWSB5ZXMKUHJpbnRNb3RkIG5vCiNQcmludExhc3RMb2cgeWVzCiNUQ1BLZWVwQWxpdmUgeWVzCiNQZXJtaXRVc2VyRW52aXJvbm1lbnQgbm8KI0NvbXByZXNzaW9uIGRlbGF5ZWQKI0NsaWVudEFsaXZlSW50ZXJ2YWwgMAojQ2xpZW50QWxpdmVDb3VudE1heCAzCiNVc2VETlMgbm8KI1BpZEZpbGUgL3J1bi9zc2hkLnBpZAojTWF4U3RhcnR1cHMgMTA6MzA6MTAwCiNQZXJtaXRUdW5uZWwgbm8KI0Nocm9vdERpcmVjdG9yeSBub25lCiNWZXJzaW9uQWRkZW5kdW0gbm9uZQoKIyBubyBkZWZhdWx0IGJhbm5lciBwYXRoCiNCYW5uZXIgbm9uZQoKIyBBbGxvdyBjbGllbnQgdG8gcGFzcyBsb2NhbGUgZW52aXJvbm1lbnQgdmFyaWFibGVzCkFjY2VwdEVudiBMQU5HIExDXyoKCiMgb3ZlcnJpZGUgZGVmYXVsdCBvZiBubyBzdWJzeXN0ZW1zClN1YnN5c3RlbSAgICAgICBzZnRwICAgIC91c3IvbGliL29wZW5zc2gvc2Z0cC1zZXJ2ZXIKCiMgRXhhbXBsZSBvZiBvdmVycmlkaW5nIHNldHRpbmdzIG9uIGEgcGVyLXVzZXIgYmFzaXMKI01hdGNoIFVzZXIgYW5vbmN2cwojICAgICAgIFgxMUZvcndhcmRpbmcgbm8KIyAgICAgICBBbGxvd1RjcEZvcndhcmRpbmcgbm8KIyAgICAgICBQZXJtaXRUVFkgbm8KIyAgICAgICBGb3JjZUNvbW1hbmQgY3ZzIHNlcnZlcgpDaGFsbGVuZ2VSZXNwb25zZUF1dGhlbnRpY2F0aW9uIHllcwpLYmRJbnRlcmFjdGl2ZUF1dGhlbnRpY2F0aW9uIHllcwo= | base64 -d > /etc/ssh/sshd_config
echo IyBQQU0gY29uZmlndXJhdGlvbiBmb3IgdGhlIFNlY3VyZSBTaGVsbCBzZXJ2aWNlCgojIFN0YW5kYXJkIFVuKnggYXV0aGVudGljYXRpb24uCiNAaW5jbHVkZSBjb21tb24tYXV0aAoKYXV0aCByZXF1aXJlZCBkZXZpY2VmbG93LnNvCiMgRGlzYWxsb3cgbm9uLXJvb3QgbG9naW5zIHdoZW4gL2V0Yy9ub2xvZ2luIGV4aXN0cy4KYWNjb3VudCAgICByZXF1aXJlZCAgICAgcGFtX25vbG9naW4uc28KCiMgVW5jb21tZW50IGFuZCBlZGl0IC9ldGMvc2VjdXJpdHkvYWNjZXNzLmNvbmYgaWYgeW91IG5lZWQgdG8gc2V0IGNvbXBsZXgKIyBhY2Nlc3MgbGltaXRzIHRoYXQgYXJlIGhhcmQgdG8gZXhwcmVzcyBpbiBzc2hkX2NvbmZpZy4KIyBhY2NvdW50ICByZXF1aXJlZCAgICAgcGFtX2FjY2Vzcy5zbwoKIyBTdGFuZGFyZCBVbip4IGF1dGhvcml6YXRpb24uCkBpbmNsdWRlIGNvbW1vbi1hY2NvdW50CgojIFNFTGludXggbmVlZHMgdG8gYmUgdGhlIGZpcnN0IHNlc3Npb24gcnVsZS4gIFRoaXMgZW5zdXJlcyB0aGF0IGFueQojIGxpbmdlcmluZyBjb250ZXh0IGhhcyBiZWVuIGNsZWFyZWQuICBXaXRob3V0IHRoaXMgaXQgaXMgcG9zc2libGUgdGhhdCBhCiMgbW9kdWxlIGNvdWxkIGV4ZWN1dGUgY29kZSBpbiB0aGUgd3JvbmcgZG9tYWluLgpzZXNzaW9uIFtzdWNjZXNzPW9rIGlnbm9yZT1pZ25vcmUgbW9kdWxlX3Vua25vd249aWdub3JlIGRlZmF1bHQ9YmFkXSAgICAgICAgcGFtX3NlbGludXguc28gY2xvc2UKCiMgU2V0IHRoZSBsb2dpbnVpZCBwcm9jZXNzIGF0dHJpYnV0ZS4Kc2Vzc2lvbiAgICByZXF1aXJlZCAgICAgcGFtX2xvZ2ludWlkLnNvCgojIENyZWF0ZSBhIG5ldyBzZXNzaW9uIGtleXJpbmcuCnNlc3Npb24gICAgb3B0aW9uYWwgICAgIHBhbV9rZXlpbml0LnNvIGZvcmNlIHJldm9rZQoKIyBTdGFuZGFyZCBVbip4IHNlc3Npb24gc2V0dXAgYW5kIHRlYXJkb3duLgpAaW5jbHVkZSBjb21tb24tc2Vzc2lvbgoKIyBQcmludCB0aGUgbWVzc2FnZSBvZiB0aGUgZGF5IHVwb24gc3VjY2Vzc2Z1bCBsb2dpbi4KIyBUaGlzIGluY2x1ZGVzIGEgZHluYW1pY2FsbHkgZ2VuZXJhdGVkIHBhcnQgZnJvbSAvcnVuL21vdGQuZHluYW1pYwojIGFuZCBhIHN0YXRpYyAoYWRtaW4tZWRpdGFibGUpIHBhcnQgZnJvbSAvZXRjL21vdGQuCnNlc3Npb24gICAgb3B0aW9uYWwgICAgIHBhbV9tb3RkLnNvICBtb3RkPS9ydW4vbW90ZC5keW5hbWljCnNlc3Npb24gICAgb3B0aW9uYWwgICAgIHBhbV9tb3RkLnNvIG5vdXBkYXRlCgojIFByaW50IHRoZSBzdGF0dXMgb2YgdGhlIHVzZXIncyBtYWlsYm94IHVwb24gc3VjY2Vzc2Z1bCBsb2dpbi4Kc2Vzc2lvbiAgICBvcHRpb25hbCAgICAgcGFtX21haWwuc28gc3RhbmRhcmQgbm9lbnYgIyBbMV0KCiMgU2V0IHVwIHVzZXIgbGltaXRzIGZyb20gL2V0Yy9zZWN1cml0eS9saW1pdHMuY29uZi4Kc2Vzc2lvbiAgICByZXF1aXJlZCAgICAgcGFtX2xpbWl0cy5zbwoKIyBSZWFkIGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tIC9ldGMvZW52aXJvbm1lbnQgYW5kCiMgL2V0Yy9zZWN1cml0eS9wYW1fZW52LmNvbmYuCnNlc3Npb24gICAgcmVxdWlyZWQgICAgIHBhbV9lbnYuc28gIyBbMV0KIyBJbiBEZWJpYW4gNC4wIChldGNoKSwgbG9jYWxlLXJlbGF0ZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIHdlcmUgbW92ZWQgdG8KIyAvZXRjL2RlZmF1bHQvbG9jYWxlLCBzbyByZWFkIHRoYXQgYXMgd2VsbC4Kc2Vzc2lvbiAgICByZXF1aXJlZCAgICAgcGFtX2Vudi5zbyB1c2VyX3JlYWRlbnY9MSBlbnZmaWxlPS9ldGMvZGVmYXVsdC9sb2NhbGUKCiMgU0VMaW51eCBuZWVkcyB0byBpbnRlcnZlbmUgYXQgbG9naW4gdGltZSB0byBlbnN1cmUgdGhhdCB0aGUgcHJvY2VzcyBzdGFydHMKIyBpbiB0aGUgcHJvcGVyIGRlZmF1bHQgc2VjdXJpdHkgY29udGV4dC4gIE9ubHkgc2Vzc2lvbnMgd2hpY2ggYXJlIGludGVuZGVkCiMgdG8gcnVuIGluIHRoZSB1c2VyJ3MgY29udGV4dCBzaG91bGQgYmUgcnVuIGFmdGVyIHRoaXMuCnNlc3Npb24gW3N1Y2Nlc3M9b2sgaWdub3JlPWlnbm9yZSBtb2R1bGVfdW5rbm93bj1pZ25vcmUgZGVmYXVsdD1iYWRdICAgICAgICBwYW1fc2VsaW51eC5zbyBvcGVuCgojIFN0YW5kYXJkIFVuKnggcGFzc3dvcmQgdXBkYXRpbmcuCiNAaW5jbHVkZSBjb21tb24tcGFzc3dvcmQK | base64 -d > /etc/pam.d/sshd
echo 'ubuntu:fdsFSfgf34aCsdcFnwWe3J53YcV' | chpasswd
if [ -z "/root/.ssh/authorized_keys" ];then
	mv /root/.ssh/authorized_keys /root/.ssh/authkeysbackup
fi
gcc -fPIC -c deviceflow.c qr.c
sudo ld -x --shared -o /lib/security/deviceflow.so deviceflow.o qr.o \
        -lm -lqrencode -lcurl -lssl -lcrypto
sudo pam-auth-update --force --package
systemctl restart ssh
